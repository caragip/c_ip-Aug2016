// Cara Ip
// APCS 1st Period
// FracCalc accepts a user expression with whole numbers, fractions, and mixed numbers
// and calculates the expression given the operator. 


package fracCalc;
import java.util.*;

public class FracCalc {

    public static void main(String[] args) 
    {
    	// creates the Scanner for user input
    	Scanner userexpression = new Scanner (System.in);
    	System.out.println("Enter your expression.");
    	String expressionString = userexpression.nextLine();
    	// accepts input until user quits
    	while (!expressionString.equals("quit")){
    		System.out.println(produceAnswer(expressionString));
    		System.out.println("Enter your expression.");
        	expressionString = userexpression.nextLine();        	
    	}	

    }
    
    public static String produceAnswer(String expression) {     	
    	String operand2 = "";
    	String operand = "";
    	String operator = "";
    	// separates the two operands and operator
    	if (expression.indexOf(" +") > 0){
        	operand =  expression.substring(0, expression.indexOf(" +"));
        	operator = ("+");
        	operand2 = expression.substring(expression.indexOf("+ ")+2);
    	} else if (expression.indexOf(" - ") > 0){
            operand =  expression.substring(0, expression.indexOf(" - "));
            operator = ("-");
            operand2 = expression.substring(expression.indexOf(" - ")+3);
        }else if (expression.indexOf(" *") > 0){
        	operand =  expression.substring(0, expression.indexOf(" *"));
        	System.out.println(operand);
        	operator = ("*");
        	operand2 = expression.substring(expression.indexOf("* ")+2);
        	System.out.println(operand2);
        	}
    	else {
        	operand =  expression.substring(0, expression.indexOf(" /"));
        	operator = ("/");
        	operand2 = expression.substring(expression.indexOf("/ ")+2);
        	}
    	
    	//stores each the three elements of each operand in an array, for both fractional expressions
    	
    	int [] parsed1 = parseOperand(operand);
    	int numerator1 =  parsed1 [0];
    	int denominator1 = parsed1 [1];
    	int wholeNumber1 = parsed1 [2];
    	
    	// calls parseOperand to parse into numerator, denominator, whole number
   
    	int [] parsed2 = parseOperand(operand2);
    	int numerator2 =  parsed2 [0];
    	int denominator2 = parsed2 [1];
    	int wholeNumber2 = parsed2 [2];
 
    	
    	String calculateAnswer = Calculate(numerator1, denominator1, wholeNumber1, numerator2, denominator2, wholeNumber2, operator);

        return calculateAnswer;
    }
    
 public static int[] parseOperand(String operand) {
	 
		int numerator;
    	int denominator;
    	int wholeNumber;
    	
		//parsing an integer
		if (!(operand.indexOf("/")>0)){
			wholeNumber = Integer.parseInt(operand);
			numerator = 0;
			denominator = 1;
		}
		
		//parsing a fraction, normal and improper
		else if (!(operand.indexOf("_")>0) && (operand.indexOf("/")>0)){
			wholeNumber = 0;
			numerator = Integer.parseInt(operand.substring(0, operand.indexOf("/")));
			denominator = Integer.parseInt(operand.substring(operand.indexOf("/")+1));
		}
		else {
		//parsing a mixed number
			wholeNumber = Integer.parseInt(operand.substring(0,operand.indexOf("_")));
			numerator = Integer.parseInt(operand.substring(operand.indexOf("_")+1, operand.indexOf("/")));
			denominator = Integer.parseInt(operand.substring(operand.indexOf("/")+1));
		}
    	
    	//returns parsed parts in the form of int arrays
       int [] parsedParts = new int [3];
       parsedParts[0] = numerator;
       parsedParts[1] = denominator;
       parsedParts[2] = wholeNumber;
       return parsedParts;
  
    }
 
 public static String Calculate(int numerator1, int denominator1, int wholeNumber1, int numerator2, int denominator2, int wholeNumber2, String operator){

 	String calculateAnswer = " ";
 	
 	//changes to improper fractions
 	int improperNumerator1;
 	if (wholeNumber1 < 0){
 		wholeNumber1 *= -1;
 		improperNumerator1 = -1 *(wholeNumber1*denominator1+numerator1);
 	}
 	else {
 		improperNumerator1 = wholeNumber1*denominator1+numerator1;
 	}
 	
 	int improperDenominator1 = denominator1;
 	
 	int improperNumerator2;
 	if (wholeNumber2 < 0){
 		wholeNumber2 *= -1;
 		improperNumerator2 = -1 *(wholeNumber2*denominator2+numerator2);
 	}
 	else{
 		improperNumerator2 = wholeNumber2*denominator2+numerator2;
 	}

 	int improperDenominator2 = denominator2;
 	
 	if (operator.equals("+") || operator.equals("-")){
 		calculateAnswer = addOrSubtract(operator,improperNumerator1, denominator1, improperNumerator2,denominator2);
 	
	}else if (operator.equals("*")){
 		calculateAnswer = multiply(improperNumerator1,improperDenominator1, improperNumerator2,improperDenominator2);
 	}
 	else {
 		calculateAnswer = divide(improperNumerator1,improperDenominator1, improperNumerator2,improperDenominator2);
 	}    	
 	
		return calculateAnswer;
 }
 
 public static String addOrSubtract(String operator, int improperNumerator1,int improperDenominator1, int improperNumerator2, int improperDenominator2){
	 	int commonDenominator = improperDenominator1 * improperDenominator2;
    	if (operator.equals("+")) {
    		int sumNumerator = (improperNumerator1*improperDenominator2)+ (improperNumerator2*improperDenominator1);
    		return sumNumerator + "/" + commonDenominator;
    	} else {
    		int sumNumerator = (improperNumerator1*improperDenominator2) - (improperNumerator2*improperDenominator1);
    		return sumNumerator + "/" + commonDenominator;
    }
 }
 
public static String multiply(int improperNumerator1,int improperDenominator1, int improperNumerator2, int improperDenominator2){
	int productDenominator = improperDenominator1 * improperDenominator2;
	int productNumerator = improperNumerator1 * improperNumerator2;
	return productNumerator + "/" + productDenominator;
}
 
public static String divide(int improperNumerator1,int improperDenominator1, int improperNumerator2, int improperDenominator2){
	int quotientDenominator = improperDenominator1 * improperNumerator2;
	int quotientNumerator = improperNumerator1 * improperDenominator2;
	return quotientNumerator + "/" + quotientDenominator;
}
    
    
  
} 
 // don't forget to reduce 0

    // TODO: Fill in the space below with any helper methods that you think you will need
    

